Mockito offers the following key features:

- There is no expectation phase for Mockito—you can either stub or verify the
mock's behavior
- You are able to mock both interfaces and classes
- You can produce little boilerplate code while working with Mockito by means
of annotations
- You can easily verify or stub with intuitive argument matchers

Let's take a look at different types of test doubles:
- Dummy: This is an object that is used only for the code to compile—it doesn't have
any business logic (for example, an object passed as a parameter to a method)
- Fake: This is an object that has an implementation but it's not production ready
(for example, using an in-memory database instead of communicating with a
standalone one)
- Stub: This is an object that has predefi ned answers to method executions made
during the test
- Mock: This is an object that has predefi ned answers to method executions made
during the test and has recorded expectations of these executions
- Spy: These are objects that are similar to stubs, but they additionally record how
they were executed (for example, a service that holds a record of the number of
sent messages)

we will check why it is crucial to assert the behavior of the system under test instead of verifying its implementation details.

Mockito has its own test runner implementation that allows you to reduce boilerplate in order
to create test doubles (mocks and spies) and to inject them (either via constructors, setters,
or refl ection) into the defi ned object. What's more, you can easily create argument captors.
All of this is feasible by means of proper annotations as follows:
- @Mock : This is used for mock creation
- @Spy : This is used to create a spy instance
- @InjectMocks : This is used to instantiate the @InjectMock annotated fi eld and
inject all the @Mock or @Spy annotated fi elds into it (if applicable)
- @Captor : This is used to create an argument captor
